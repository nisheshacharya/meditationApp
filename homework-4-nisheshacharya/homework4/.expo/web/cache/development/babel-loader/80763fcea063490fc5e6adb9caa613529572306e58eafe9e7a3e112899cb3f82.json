{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ReminderScreen() {\n  var _useState = useState(new Date()),\n    _useState2 = _slicedToArray(_useState, 2),\n    reminderTime = _useState2[0],\n    setReminderTime = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showTimePicker = _useState4[0],\n    setShowTimePicker = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedDays = _useState6[0],\n    setSelectedDays = _useState6[1];\n  var daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  var handleDayPress = function handleDayPress(day) {\n    if (selectedDays.includes(day)) {\n      setSelectedDays(selectedDays.filter(function (d) {\n        return d !== day;\n      }));\n    } else {\n      setSelectedDays([].concat(_toConsumableArray(selectedDays), [day]));\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Set Reminder\"\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return setShowTimePicker(true);\n      },\n      style: styles.timePicker,\n      children: _jsx(Text, {\n        style: styles.timeText,\n        children: `${reminderTime.getHours()}:${reminderTime.getMinutes() < 10 ? '0' : ''}${reminderTime.getMinutes()}`\n      })\n    }), showTimePicker && _jsx(DateTimePicker, {\n      value: reminderTime,\n      mode: \"time\",\n      display: \"default\",\n      onChange: function onChange(event, selectedTime) {\n        setShowTimePicker(false);\n        if (selectedTime) {\n          setReminderTime(selectedTime);\n        }\n      }\n    }), _jsx(View, {\n      style: styles.daysContainer,\n      children: daysOfWeek.map(function (day) {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleDayPress(day);\n          },\n          style: [styles.dayButton, selectedDays.includes(day) && styles.dayButtonSelected],\n          children: _jsx(Text, {\n            style: [styles.dayButtonText, selectedDays.includes(day) && styles.dayButtonTextSelected],\n            children: day\n          })\n        }, day);\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    marginBottom: 20,\n    fontWeight: 'bold'\n  },\n  timePicker: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 20,\n    width: '80%',\n    alignItems: 'center',\n    backgroundColor: '#f9f9f9'\n  },\n  timeText: {\n    fontSize: 18,\n    color: '#333'\n  },\n  daysContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  },\n  dayButton: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 5,\n    padding: 10,\n    margin: 5,\n    minWidth: 40,\n    alignItems: 'center',\n    backgroundColor: '#f9f9f9'\n  },\n  dayButtonSelected: {\n    backgroundColor: '#4caf50',\n    borderColor: '#388e3c'\n  },\n  dayButtonText: {\n    fontSize: 16,\n    color: '#333'\n  },\n  dayButtonTextSelected: {\n    color: '#fff'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","TextInput","TouchableOpacity","DateTimePicker","jsx","_jsx","jsxs","_jsxs","ReminderScreen","_useState","Date","_useState2","_slicedToArray","reminderTime","setReminderTime","_useState3","_useState4","showTimePicker","setShowTimePicker","_useState5","_useState6","selectedDays","setSelectedDays","daysOfWeek","handleDayPress","day","includes","filter","d","concat","_toConsumableArray","style","styles","container","children","title","onPress","timePicker","timeText","getHours","getMinutes","value","mode","display","onChange","event","selectedTime","daysContainer","map","dayButton","dayButtonSelected","dayButtonText","dayButtonTextSelected","create","flex","justifyContent","alignItems","padding","fontSize","marginBottom","fontWeight","borderWidth","borderColor","borderRadius","width","backgroundColor","color","flexDirection","flexWrap","margin","minWidth"],"sources":["D:/practice/projects/meditationApp/meditationApp/homework-4-nisheshacharya/homework4/screens/ReminderScreen.js"],"sourcesContent":["// screens/ReminderScreen.js\r\nimport React, { useState } from 'react';\r\nimport { View, Text, StyleSheet, TextInput, TouchableOpacity } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\n\r\nexport default function ReminderScreen() {\r\n  const [reminderTime, setReminderTime] = useState(new Date());\r\n  const [showTimePicker, setShowTimePicker] = useState(false);\r\n  const [selectedDays, setSelectedDays] = useState([]);\r\n\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n  const handleDayPress = (day) => {\r\n    if (selectedDays.includes(day)) {\r\n      setSelectedDays(selectedDays.filter((d) => d !== day));\r\n    } else {\r\n      setSelectedDays([...selectedDays, day]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Set Reminder</Text>\r\n      \r\n      <TouchableOpacity onPress={() => setShowTimePicker(true)} style={styles.timePicker}>\r\n        <Text style={styles.timeText}>\r\n          {`${reminderTime.getHours()}:${reminderTime.getMinutes() < 10 ? '0' : ''}${reminderTime.getMinutes()}`}\r\n        </Text>\r\n      </TouchableOpacity>\r\n\r\n      {showTimePicker && (\r\n        <DateTimePicker\r\n          value={reminderTime}\r\n          mode=\"time\"\r\n          display=\"default\"\r\n          onChange={(event, selectedTime) => {\r\n            setShowTimePicker(false);\r\n            if (selectedTime) {\r\n              setReminderTime(selectedTime);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <View style={styles.daysContainer}>\r\n        {daysOfWeek.map((day) => (\r\n          <TouchableOpacity\r\n            key={day}\r\n            onPress={() => handleDayPress(day)}\r\n            style={[\r\n              styles.dayButton,\r\n              selectedDays.includes(day) && styles.dayButtonSelected,\r\n            ]}\r\n          >\r\n            <Text\r\n              style={[\r\n                styles.dayButtonText,\r\n                selectedDays.includes(day) && styles.dayButtonTextSelected,\r\n              ]}\r\n            >\r\n              {day}\r\n            </Text>\r\n          </TouchableOpacity>\r\n        ))}\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    marginBottom: 20,\r\n    fontWeight: 'bold',\r\n  },\r\n  timePicker: {\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 20,\r\n    width: '80%',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f9f9f9',\r\n  },\r\n  timeText: {\r\n    fontSize: 18,\r\n    color: '#333',\r\n  },\r\n  daysContainer: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n  },\r\n  dayButton: {\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    margin: 5,\r\n    minWidth: 40,\r\n    alignItems: 'center',\r\n    backgroundColor: '#f9f9f9',\r\n  },\r\n  dayButtonSelected: {\r\n    backgroundColor: '#4caf50',\r\n    borderColor: '#388e3c',\r\n  },\r\n  dayButtonText: {\r\n    fontSize: 16,\r\n    color: '#333',\r\n  },\r\n  dayButtonTextSelected: {\r\n    color: '#fff',\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}