{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useLayoutEffect, useState } from 'react';\nimport { addNotificationResponseReceivedListener, getLastNotificationResponseAsync } from \"./NotificationsEmitter\";\nexport default function useLastNotificationResponse() {\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastNotificationResponse = _useState2[0],\n    setLastNotificationResponse = _useState2[1];\n  var newResponseIfNeeded = function newResponseIfNeeded(prevResponse, newResponse) {\n    if (!newResponse) {\n      return prevResponse;\n    }\n    if (!prevResponse) {\n      return newResponse;\n    }\n    return prevResponse.notification.request.identifier !== newResponse.notification.request.identifier ? newResponse : prevResponse;\n  };\n  useLayoutEffect(function () {\n    getLastNotificationResponseAsync == null ? void 0 : getLastNotificationResponseAsync().then(function (response) {\n      return setLastNotificationResponse(function (prevResponse) {\n        return newResponseIfNeeded(prevResponse, response);\n      });\n    });\n    var subscription = addNotificationResponseReceivedListener(function (response) {\n      return setLastNotificationResponse(function (prevResponse) {\n        return newResponseIfNeeded(prevResponse, response);\n      });\n    });\n    return function () {\n      subscription.remove();\n    };\n  }, []);\n  return lastNotificationResponse;\n}","map":{"version":3,"names":["useLayoutEffect","useState","addNotificationResponseReceivedListener","getLastNotificationResponseAsync","useLastNotificationResponse","_useState","undefined","_useState2","_slicedToArray","lastNotificationResponse","setLastNotificationResponse","newResponseIfNeeded","prevResponse","newResponse","notification","request","identifier","then","response","subscription","remove"],"sources":["D:\\practice\\projects\\meditationApp\\meditationApp\\homework-4-nisheshacharya\\homework4\\node_modules\\expo-notifications\\src\\useLastNotificationResponse.ts"],"sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\nimport { NotificationResponse } from './Notifications.types';\nimport {\n  addNotificationResponseReceivedListener,\n  getLastNotificationResponseAsync,\n} from './NotificationsEmitter';\n\ntype MaybeNotificationResponse = NotificationResponse | null | undefined;\n\n/**\n * A React hook always returns the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n *\n * @return The hook may return one of these three types/values:\n * - `undefined` - until we're sure of what to return,\n * - `null` - if no notification response has been received yet,\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n *\n * @example\n * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n * import { Linking } from 'react-native';\n *\n * export default function App() {\n *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n *   React.useEffect(() => {\n *     if (\n *       lastNotificationResponse &&\n *       lastNotificationResponse.notification.request.content.data.url &&\n *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n *     ) {\n *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n *     }\n *   }, [lastNotificationResponse]);\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] =\n    useState<MaybeNotificationResponse>(undefined);\n\n  // Pure function that returns the new response if it is different from the previous,\n  // otherwise return the previous response\n  const newResponseIfNeeded = (\n    prevResponse: MaybeNotificationResponse,\n    newResponse: MaybeNotificationResponse\n  ) => {\n    // If the new response is undefined or null, no need for update\n    if (!newResponse) {\n      return prevResponse;\n    }\n    // If the previous response is undefined or null and the new response is not, we should update\n    if (!prevResponse) {\n      return newResponse;\n    }\n    return prevResponse.notification.request.identifier !==\n      newResponse.notification.request.identifier\n      ? newResponse\n      : prevResponse;\n  };\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    // Get the last response first, in case it was set earlier (even in native code on startup)\n    // before this renders\n    getLastNotificationResponseAsync?.().then((response) =>\n      setLastNotificationResponse((prevResponse) => newResponseIfNeeded(prevResponse, response))\n    );\n\n    // Set up listener for responses that come in, and set the last response if needed\n    const subscription = addNotificationResponseReceivedListener((response) =>\n      setLastNotificationResponse((prevResponse) => newResponseIfNeeded(prevResponse, response))\n    );\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  return lastNotificationResponse;\n}\n"],"mappings":";AAAA,SAASA,eAAe,EAAEC,QAAQ,QAAQ,OAAO;AAGjD,SACEC,uCAAuC,EACvCC,gCAAgC;AAyClC,eAAc,SAAUC,2BAA2BA,CAAA;EACjD,IAAAC,SAAA,GACEJ,QAAQ,CAA4BK,SAAS,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IADzCI,wBAAwB,GAAAF,UAAA;IAAEG,2BAA2B,GAAAH,UAAA;EAK5D,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAmBA,CACvBC,YAAuC,EACvCC,WAAsC,EACpC;IAEF,IAAI,CAACA,WAAW,EAAE;MAChB,OAAOD,YAAY;;IAGrB,IAAI,CAACA,YAAY,EAAE;MACjB,OAAOC,WAAW;;IAEpB,OAAOD,YAAY,CAACE,YAAY,CAACC,OAAO,CAACC,UAAU,KACjDH,WAAW,CAACC,YAAY,CAACC,OAAO,CAACC,UAAU,GACzCH,WAAW,GACXD,YAAY;EAClB,CAAC;EAGDZ,eAAe,CAAC,YAAK;IAGnBG,gCAAgC,oBAAhCA,gCAAgC,CAAE,CAAE,CAACc,IAAI,CAAC,UAACC,QAAQ;MAAA,OACjDR,2BAA2B,CAAC,UAACE,YAAY;QAAA,OAAKD,mBAAmB,CAACC,YAAY,EAAEM,QAAQ,CAAC;MAAA,EAAC;IAAA,EAC3F;IAGD,IAAMC,YAAY,GAAGjB,uCAAuC,CAAC,UAACgB,QAAQ;MAAA,OACpER,2BAA2B,CAAC,UAACE,YAAY;QAAA,OAAKD,mBAAmB,CAACC,YAAY,EAAEM,QAAQ,CAAC;MAAA,EAAC;IAAA,EAC3F;IACD,OAAO,YAAK;MACVC,YAAY,CAACC,MAAM,EAAE;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOX,wBAAwB;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}