{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { DatePickerAndroid } from \"react-native-web/dist/index\";\nimport { DatePickerIOS } from \"react-native-web/dist/index\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ReminderScreen() {\n  var _useState = useState(new Date()),\n    _useState2 = _slicedToArray(_useState, 2),\n    reminderTime = _useState2[0],\n    setReminderTime = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedDays = _useState4[0],\n    setSelectedDays = _useState4[1];\n  function registerForPushNotificationsAsync() {\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  function _registerForPushNotificationsAsync() {\n    _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n      if (Platform.OS === 'android') {\n        yield Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n      var _yield$Permissions$ge = yield Permissions.getAsync(Permissions.NOTIFICATIONS),\n        existingStatus = _yield$Permissions$ge.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Permissions$as = yield Permissions.askAsync(Permissions.NOTIFICATIONS),\n          status = _yield$Permissions$as.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      var token = (yield Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n      return token;\n    });\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  function schedulePushNotification() {\n    return _schedulePushNotification.apply(this, arguments);\n  }\n  function _schedulePushNotification() {\n    _schedulePushNotification = _asyncToGenerator(function* () {\n      if (!reminderTime || !selectedDays.length) return;\n      for (var day of selectedDays) {\n        var reminderDate = new Date();\n        reminderDate.setHours(reminderTime.getHours());\n        reminderDate.setMinutes(reminderTime.getMinutes());\n        reminderDate.setSeconds(0);\n        var dayOffset = (day - reminderDate.getDay() + 7) % 7;\n        reminderDate.setDate(reminderDate.getDate() + dayOffset);\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: \"Time for Meditation! üßò‚Äç‚ôÇÔ∏è\",\n            body: 'Start your daily meditation now!'\n          },\n          trigger: {\n            year: reminderDate.getFullYear(),\n            month: reminderDate.getMonth() + 1,\n            day: reminderDate.getDate(),\n            hour: reminderDate.getHours(),\n            minute: reminderDate.getMinutes(),\n            repeats: true\n          }\n        });\n      }\n    });\n    return _schedulePushNotification.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Select Time for Reminder:\"\n    }), _jsx(Button, {\n      title: \"Select Time\",\n      onPress: _asyncToGenerator(function* () {\n        if (Platform.OS === 'ios') {} else {\n          var _yield$DatePickerAndr = yield DatePickerAndroid.open({\n              date: reminderTime\n            }),\n            action = _yield$DatePickerAndr.action,\n            year = _yield$DatePickerAndr.year,\n            month = _yield$DatePickerAndr.month,\n            day = _yield$DatePickerAndr.day;\n          if (action !== DatePickerAndroid.dismissedAction) {\n            setReminderTime(new Date(year, month, day));\n          }\n        }\n      })\n    }), _jsx(Text, {\n      children: \"Select Days of the Week:\"\n    }), _jsxs(Picker, {\n      selectedValue: selectedDays,\n      multiple: true,\n      onValueChange: function onValueChange(itemValue, itemIndex) {\n        setSelectedDays(function (prevState) {\n          if (prevState.includes(itemValue)) {\n            return prevState.filter(function (day) {\n              return day !== itemValue;\n            });\n          } else {\n            return [].concat(_toConsumableArray(prevState), [itemValue]);\n          }\n        });\n      },\n      children: [_jsx(Picker.Item, {\n        label: \"Sunday\",\n        value: 0\n      }), _jsx(Picker.Item, {\n        label: \"Monday\",\n        value: 1\n      }), _jsx(Picker.Item, {\n        label: \"Tuesday\",\n        value: 2\n      }), _jsx(Picker.Item, {\n        label: \"Wednesday\",\n        value: 3\n      }), _jsx(Picker.Item, {\n        label: \"Thursday\",\n        value: 4\n      }), _jsx(Picker.Item, {\n        label: \"Friday\",\n        value: 5\n      }), _jsx(Picker.Item, {\n        label: \"Saturday\",\n        value: 6\n      })]\n    }), _jsx(Button, {\n      title: \"Schedule Reminder\",\n      onPress: schedulePushNotification\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  picker: {\n    width: 200,\n    height: 50\n  }\n});","map":{"version":3,"names":["React","useState","Button","Platform","View","Text","StyleSheet","DatePickerAndroid","DatePickerIOS","Picker","Notifications","Permissions","jsx","_jsx","jsxs","_jsxs","ReminderScreen","_useState","Date","_useState2","_slicedToArray","reminderTime","setReminderTime","_useState3","_useState4","selectedDays","setSelectedDays","registerForPushNotificationsAsync","_registerForPushNotificationsAsync","apply","arguments","_asyncToGenerator","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","_yield$Permissions$ge","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","_yield$Permissions$as","askAsync","alert","token","getExpoPushTokenAsync","data","console","log","schedulePushNotification","_schedulePushNotification","length","day","reminderDate","setHours","getHours","setMinutes","getMinutes","setSeconds","dayOffset","getDay","setDate","getDate","scheduleNotificationAsync","content","title","body","trigger","year","getFullYear","month","getMonth","hour","minute","repeats","style","styles","container","children","onPress","_yield$DatePickerAndr","open","date","action","dismissedAction","selectedValue","multiple","onValueChange","itemValue","itemIndex","prevState","includes","filter","concat","_toConsumableArray","Item","label","value","create","flex","justifyContent","alignItems","padding","picker","width","height"],"sources":["D:/practice/projects/meditationApp/meditationApp/homework-4-nisheshacharya/homework4/screens/ReminderScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Platform, View, Text, StyleSheet, DatePickerAndroid, DatePickerIOS, Picker } from 'react-native';\r\nimport * as Notifications from 'expo-notifications';\r\nimport * as Permissions from 'expo-permissions';\r\n\r\nexport default function ReminderScreen() {\r\n  const [reminderTime, setReminderTime] = useState(new Date());\r\n  const [selectedDays, setSelectedDays] = useState([]);\r\n\r\n  async function registerForPushNotificationsAsync() {\r\n    if (Platform.OS === 'android') {\r\n      await Notifications.setNotificationChannelAsync('default', {\r\n        name: 'default',\r\n        importance: Notifications.AndroidImportance.MAX,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#FF231F7C',\r\n      });\r\n    }\r\n\r\n    const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\r\n    let finalStatus = existingStatus;\r\n\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n      finalStatus = status;\r\n    }\r\n\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n\r\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n\r\n    return token;\r\n  }\r\n\r\n  async function schedulePushNotification() {\r\n    if (!reminderTime || !selectedDays.length) return;\r\n\r\n    for (const day of selectedDays) {\r\n      const reminderDate = new Date();\r\n      reminderDate.setHours(reminderTime.getHours());\r\n      reminderDate.setMinutes(reminderTime.getMinutes());\r\n      reminderDate.setSeconds(0);\r\n\r\n      // Schedule notification for the selected days\r\n      // Adjust the date to match the specific day of the week if necessary\r\n      const dayOffset = (day - reminderDate.getDay() + 7) % 7;\r\n      reminderDate.setDate(reminderDate.getDate() + dayOffset);\r\n\r\n      await Notifications.scheduleNotificationAsync({\r\n        content: {\r\n          title: \"Time for Meditation! üßò‚Äç‚ôÇÔ∏è\",\r\n          body: 'Start your daily meditation now!',\r\n        },\r\n        trigger: {\r\n          year: reminderDate.getFullYear(),\r\n          month: reminderDate.getMonth() + 1,\r\n          day: reminderDate.getDate(),\r\n          hour: reminderDate.getHours(),\r\n          minute: reminderDate.getMinutes(),\r\n          repeats: true,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>Select Time for Reminder:</Text>\r\n      {/* Implement a DatePicker or TimePicker component here */}\r\n      \r\n      <Button title=\"Select Time\" onPress={async () => {\r\n        if (Platform.OS === 'ios') {\r\n          // Use DatePickerIOS for iOS\r\n        } else {\r\n          // Use DatePickerAndroid for Android\r\n          const { action, year, month, day } = await DatePickerAndroid.open({\r\n            date: reminderTime,\r\n          });\r\n          if (action !== DatePickerAndroid.dismissedAction) {\r\n            setReminderTime(new Date(year, month, day));\r\n          }\r\n        }\r\n      }} />\r\n      \r\n      <Text>Select Days of the Week:</Text>\r\n      <Picker\r\n        selectedValue={selectedDays}\r\n        multiple={true}\r\n        onValueChange={(itemValue, itemIndex) => {\r\n          setSelectedDays(prevState => {\r\n            if (prevState.includes(itemValue)) {\r\n              return prevState.filter(day => day !== itemValue);\r\n            } else {\r\n              return [...prevState, itemValue];\r\n            }\r\n          });\r\n        }}\r\n      >\r\n        <Picker.Item label=\"Sunday\" value={0} />\r\n        <Picker.Item label=\"Monday\" value={1} />\r\n        <Picker.Item label=\"Tuesday\" value={2} />\r\n        <Picker.Item label=\"Wednesday\" value={3} />\r\n        <Picker.Item label=\"Thursday\" value={4} />\r\n        <Picker.Item label=\"Friday\" value={5} />\r\n        <Picker.Item label=\"Saturday\" value={6} />\r\n      </Picker>\r\n      \r\n      <Button\r\n        title=\"Schedule Reminder\"\r\n        onPress={schedulePushNotification}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  picker: {\r\n    width: 200,\r\n    height: 50,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}