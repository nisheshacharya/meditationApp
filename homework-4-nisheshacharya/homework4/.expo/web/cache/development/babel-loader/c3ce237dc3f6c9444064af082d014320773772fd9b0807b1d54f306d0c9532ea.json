{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useRef } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    started = _useState2[0],\n    setStarted = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    paused = _useState4[0],\n    setPaused = _useState4[1];\n  var _useState5 = useState({\n      med_minutes: 0,\n      med_seconds: 0,\n      rest_minutes: 0,\n      rest_seconds: 0\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    time = _useState6[0],\n    setTime = _useState6[1];\n  var _useState7 = useState('white'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    color = _useState8[0],\n    setColor = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isResting = _useState10[0],\n    setIsResting = _useState10[1];\n  var ref = useRef(null);\n  var getTotalSeconds = function getTotalSeconds() {\n    return time.med_minutes * 60 + time.med_seconds + (time.rest_minutes * 60 + time.rest_seconds);\n  };\n  var _useState11 = useState(getTotalSeconds()),\n    _useState12 = _slicedToArray(_useState11, 2),\n    count = _useState12[0],\n    setCount = _useState12[1];\n  var _useState13 = useState([]),\n    _useState14 = _slicedToArray(_useState13, 2),\n    history = _useState14[0],\n    setHistory = _useState14[1];\n  var _useState15 = useState(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    historyDisplay = _useState16[0],\n    setHistoryDisplay = _useState16[1];\n  var clearTimer = function clearTimer() {\n    if (ref.current) {\n      clearInterval(ref.current);\n      ref.current = null;\n    }\n  };\n  var reset = function reset() {\n    clearTimer();\n    setColor('white');\n    setStarted(false);\n    setPaused(false);\n    setIsResting(false);\n  };\n  var startTimer = function startTimer() {\n    clearTimer();\n    ref.current = setInterval(function () {\n      setCount(function (prev) {\n        var restTimeInSeconds = time.rest_minutes * 60 + time.rest_seconds;\n        if (prev > restTimeInSeconds && !isResting) {\n          setColor('green');\n        }\n        if (prev === restTimeInSeconds && !isResting) {\n          setColor('orange');\n          setIsResting(true);\n        }\n        if (prev > 0) {\n          return prev - 1;\n        }\n        saveHistory();\n        reset();\n        showSummary();\n        return getTotalSeconds();\n      });\n    }, 1000);\n  };\n  var start = function start() {\n    setStarted(true);\n    setColor(\"green\");\n    startTimer();\n  };\n  var stop = function stop() {\n    reset();\n    setCount(getTotalSeconds());\n    saveHistory();\n  };\n  var pause = function pause() {\n    clearTimer();\n    setPaused(!paused);\n  };\n  var resume = function resume() {\n    startTimer();\n    setPaused(!paused);\n  };\n  var textChange = function textChange(field, text) {\n    var newValue = parseInt(text) || 0;\n    setTime(_objectSpread(_objectSpread({}, time), {}, _defineProperty({}, field, newValue)));\n  };\n  var saveHistory = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var currentDate = new Date();\n      var year = currentDate.getFullYear().toString();\n      var month = (currentDate.getMonth() + 1).toString();\n      var day = currentDate.getDate().toString();\n      var hour = currentDate.getHours().toString().padStart(2, '0');\n      var minute = currentDate.getMinutes().toString().padStart(2, '0');\n      console.log(year, month, day, hour, minute);\n      var newEntry = {\n        year: year,\n        month: month,\n        day: day,\n        hour: hour,\n        minute: minute\n      };\n      var updatedHistory = [].concat(_toConsumableArray(history), [newEntry]);\n      setHistory(updatedHistory);\n      try {\n        yield AsyncStorage.setItem('meditationHistory', JSON.stringify(updatedHistory));\n      } catch (error) {\n        console.error('Error saving history to AsyncStorage:', error);\n      }\n    });\n    return function saveHistory() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var showSummary = function showSummary() {\n    var totalMinutes = time.med_minutes + Math.floor(time.med_seconds / 60);\n    var totalSeconds = time.med_seconds % 60;\n    Alert.alert(\"Meditation Summary\", `Meditation Duration: ${totalMinutes} minutes ${totalSeconds} seconds`, [{\n      text: \"OK\"\n    }]);\n  };\n  useEffect(function () {\n    setCount(getTotalSeconds());\n    var loadHistory = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var savedHistory = yield AsyncStorage.getItem('meditationHistory');\n          if (savedHistory !== null) {\n            setHistory(JSON.parse(savedHistory));\n          }\n        } catch (error) {\n          console.error('Error loading history from AsyncStorage:', error);\n        }\n      });\n      return function loadHistory() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    loadHistory();\n  }, [time]);\n  var formatTime = function formatTime(seconds) {\n    var minutes = Math.floor(seconds / 60);\n    var remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  return _jsx(ImageBackground, {\n    source: isResting ? require(\"./media/Rest.gif\") : require(\"./media/Meditate.gif\"),\n    style: styles.background,\n    children: _jsxs(View, {\n      style: styles.content,\n      children: [_jsx(Image, {\n        source: require(\"./media/AppLogo.png\"),\n        style: styles.logo\n      }), _jsx(Text, {\n        style: styles.text,\n        children: \"Meditation App\"\n      }), _jsx(Text, {\n        style: styles.text,\n        children: formatTime(count)\n      }), _jsxs(View, {\n        style: styles.inputContainer,\n        children: [_jsxs(View, {\n          style: styles.inputRow,\n          children: [_jsx(TextInput, {\n            placeholder: \"Meditation Minutes\",\n            onChangeText: function onChangeText(text) {\n              return textChange('med_minutes', text);\n            },\n            keyboardType: \"numeric\",\n            style: styles.inputField\n          }), _jsx(Text, {\n            style: styles.text,\n            children: \":\"\n          }), _jsx(TextInput, {\n            placeholder: \"Meditation Seconds\",\n            onChangeText: function onChangeText(text) {\n              return textChange('med_seconds', text);\n            },\n            keyboardType: \"numeric\",\n            style: styles.inputField\n          })]\n        }), _jsxs(View, {\n          style: styles.inputRow,\n          children: [_jsx(TextInput, {\n            placeholder: \"Rest Minutes\",\n            onChangeText: function onChangeText(text) {\n              return textChange('rest_minutes', text);\n            },\n            keyboardType: \"numeric\",\n            style: styles.inputField\n          }), _jsx(Text, {\n            style: styles.text,\n            children: \":\"\n          }), _jsx(TextInput, {\n            placeholder: \"Rest Seconds\",\n            onChangeText: function onChangeText(text) {\n              return textChange('rest_seconds', text);\n            },\n            keyboardType: \"numeric\",\n            style: styles.inputField\n          })]\n        })]\n      }), started ? _jsx(Button, {\n        title: \"Stop\",\n        onPress: stop\n      }) : _jsx(Button, {\n        title: \"Start\",\n        onPress: start\n      }), started && !paused ? _jsx(Button, {\n        title: \"Pause\",\n        onPress: pause\n      }) : null, started && paused ? _jsx(Button, {\n        title: \"Resume\",\n        onPress: resume\n      }) : null, _jsxs(View, {\n        style: styles.history,\n        children: [_jsx(TouchableOpacity, {\n          onPressOut: function onPressOut() {\n            return setHistoryDisplay(!historyDisplay);\n          },\n          children: _jsx(Text, {\n            style: styles.text,\n            children: \"Meditation History\"\n          })\n        }), historyDisplay && _jsx(ScrollView, {\n          style: styles.historyContainer,\n          children: history.map(function (entry, index) {\n            return _jsx(Text, {\n              style: styles.text,\n              children: `${entry.year}-${entry.month}-${entry.day} ${entry.hour}:${entry.minute}`\n            }, index);\n          })\n        })]\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    resizeMode: 'cover',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  content: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  logo: {\n    width: 100,\n    height: 100,\n    marginBottom: 20\n  },\n  text: {\n    color: 'white',\n    fontSize: 24\n  },\n  inputContainer: {\n    padding: 10\n  },\n  inputRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 10\n  },\n  inputField: {\n    width: 50,\n    margin: 5,\n    padding: 5,\n    borderColor: 'gray',\n    borderWidth: 1,\n    borderRadius: 5,\n    color: 'white'\n  },\n  history: {\n    flex: 1,\n    padding: 5\n  },\n  historyContainer: {\n    padding: 4,\n    margin: 5,\n    borderColor: 'gray',\n    borderWidth: 2,\n    height: 30,\n    borderRadius: 10\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","Button","StyleSheet","View","ImageBackground","TextInput","Text","ScrollView","TouchableOpacity","Alert","Image","useRef","AsyncStorage","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","started","setStarted","_useState3","_useState4","paused","setPaused","_useState5","med_minutes","med_seconds","rest_minutes","rest_seconds","_useState6","time","setTime","_useState7","_useState8","color","setColor","_useState9","_useState10","isResting","setIsResting","ref","getTotalSeconds","_useState11","_useState12","count","setCount","_useState13","_useState14","history","setHistory","_useState15","_useState16","historyDisplay","setHistoryDisplay","clearTimer","current","clearInterval","reset","startTimer","setInterval","prev","restTimeInSeconds","saveHistory","showSummary","start","stop","pause","resume","textChange","field","text","newValue","parseInt","_objectSpread","_defineProperty","_ref","_asyncToGenerator","currentDate","Date","year","getFullYear","toString","month","getMonth","day","getDate","hour","getHours","padStart","minute","getMinutes","console","log","newEntry","updatedHistory","concat","_toConsumableArray","setItem","JSON","stringify","error","apply","arguments","totalMinutes","Math","floor","totalSeconds","alert","loadHistory","_ref2","savedHistory","getItem","parse","formatTime","seconds","minutes","remainingSeconds","source","require","style","styles","background","children","content","logo","inputContainer","inputRow","placeholder","onChangeText","keyboardType","inputField","title","onPress","onPressOut","historyContainer","map","entry","index","create","flex","resizeMode","justifyContent","alignItems","width","padding","height","marginBottom","fontSize","flexDirection","margin","borderColor","borderWidth","borderRadius"],"sources":["D:/practice/projects/meditationApp/meditationApp/homework-4-nisheshacharya/homework4/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, StyleSheet, View, ImageBackground, TextInput, Text, ScrollView, TouchableOpacity, Alert, Image } from 'react-native';\nimport { useRef } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function App() {\n  const [started, setStarted] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const [time, setTime] = useState({ med_minutes: 0, med_seconds: 0, rest_minutes: 0, rest_seconds: 0 });\n  const [color, setColor] = useState('white');\n  const [isResting, setIsResting] = useState(false); // Track if in rest phase\n  const ref = useRef(null);\n\n  const getTotalSeconds = () => {\n    return (time.med_minutes * 60 + time.med_seconds) + (time.rest_minutes * 60 + time.rest_seconds);\n  }\n\n  const [count, setCount] = useState(getTotalSeconds());\n  const [history, setHistory] = useState([]);\n  const [historyDisplay, setHistoryDisplay] = useState(false);\n\n  const clearTimer = () => {\n    if (ref.current) {\n      clearInterval(ref.current);\n      ref.current = null;\n    }\n  }\n\n  const reset = () => {\n    clearTimer();\n    setColor('white');\n    setStarted(false);\n    setPaused(false);\n    setIsResting(false); // Reset rest phase\n  }\n\n  const startTimer = () => {\n    clearTimer();\n    ref.current = setInterval(() => {\n      setCount(prev => {\n        const restTimeInSeconds = time.rest_minutes * 60 + time.rest_seconds;\n        if (prev > restTimeInSeconds && !isResting) {\n          setColor('green');\n        }\n        if (prev === restTimeInSeconds && !isResting) {\n          setColor('orange');\n          setIsResting(true); // Switch to rest phase\n        }\n        if (prev > 0) {\n          return prev - 1;\n        }\n        saveHistory();\n        reset();\n        showSummary();\n        return getTotalSeconds();\n      });\n    }, 1000);\n  }\n\n  const start = () => {\n    setStarted(true);\n    setColor(\"green\");\n    startTimer();\n  }\n\n  const stop = () => {\n    reset();\n    setCount(getTotalSeconds());\n    saveHistory();\n  }\n\n  const pause = () => {\n    clearTimer();\n    setPaused(!paused);\n  }\n\n  const resume = () => {\n    startTimer();\n    setPaused(!paused);\n  }\n\n  const textChange = (field, text) => {\n    const newValue = parseInt(text) || 0;\n    setTime({ ...time, [field]: newValue });\n  }\n\n  const saveHistory = async () => {\n    const currentDate = new Date();\n    const year = currentDate.getFullYear().toString();\n    const month = (currentDate.getMonth() + 1).toString();\n    const day = currentDate.getDate().toString();\n    const hour = currentDate.getHours().toString().padStart(2, '0');\n    const minute = currentDate.getMinutes().toString().padStart(2, '0');\n\n    console.log(year, month, day, hour, minute);\n\n    const newEntry = { year, month, day, hour, minute };\n    const updatedHistory = [...history, newEntry];\n    setHistory(updatedHistory);\n\n    try {\n      await AsyncStorage.setItem('meditationHistory', JSON.stringify(updatedHistory));\n    } catch (error) {\n      console.error('Error saving history to AsyncStorage:', error);\n    }\n  }\n\n  const showSummary = () => {\n    const totalMinutes = time.med_minutes + Math.floor(time.med_seconds / 60);\n    const totalSeconds = time.med_seconds % 60;\n    Alert.alert(\n      \"Meditation Summary\",\n      `Meditation Duration: ${totalMinutes} minutes ${totalSeconds} seconds`,\n      [{ text: \"OK\" }]\n    );\n  }\n\n  useEffect(() => {\n    setCount(getTotalSeconds());\n\n    // Load history \n    const loadHistory = async () => {\n      try {\n        const savedHistory = await AsyncStorage.getItem('meditationHistory');\n        if (savedHistory !== null) {\n          setHistory(JSON.parse(savedHistory));\n        }\n      } catch (error) {\n        console.error('Error loading history from AsyncStorage:', error);\n      }\n    };\n\n    loadHistory();\n  }, [time]);\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n\n  return (\n    <ImageBackground \n      source={isResting ? require('./media/Rest.gif') : require('./media/Meditate.gif')} \n      style={styles.background} \n    >\n      <View style={styles.content}>\n        <Image source={require('./media/AppLogo.png')} style={styles.logo} />\n        <Text style={styles.text}>Meditation App</Text>\n        <Text style={styles.text}>{formatTime(count)}</Text>\n        <View style={styles.inputContainer}>\n          <View style={styles.inputRow}>\n            <TextInput\n              placeholder='Meditation Minutes'\n              onChangeText={(text) => textChange('med_minutes', text)}\n              keyboardType='numeric'\n              style={styles.inputField}\n            />\n            <Text style={styles.text}>:</Text>\n            <TextInput\n              placeholder='Meditation Seconds'\n              onChangeText={(text) => textChange('med_seconds', text)}\n              keyboardType='numeric'\n              style={styles.inputField}\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <TextInput\n              placeholder='Rest Minutes'\n              onChangeText={(text) => textChange('rest_minutes', text)}\n              keyboardType='numeric'\n              style={styles.inputField}\n            />\n            <Text style={styles.text}>:</Text>\n            <TextInput\n              placeholder='Rest Seconds'\n              onChangeText={(text) => textChange('rest_seconds', text)}\n              keyboardType='numeric'\n              style={styles.inputField}\n            />\n          </View>\n        </View>\n        {started ? <Button title='Stop' onPress={stop} /> : <Button title=\"Start\" onPress={start} />}\n        {started && !paused ? <Button title='Pause' onPress={pause} /> : null}\n        {started && paused ? <Button title='Resume' onPress={resume} /> : null}\n        <View style={styles.history}>\n          <TouchableOpacity onPressOut={() => setHistoryDisplay(!historyDisplay)}>\n            <Text style={styles.text}>Meditation History</Text>\n          </TouchableOpacity>\n\n          {historyDisplay &&\n            <ScrollView style={styles.historyContainer}>\n              {history.map((entry, index) => (\n                <Text key={index} style={styles.text}>\n                  {`${entry.year}-${entry.month}-${entry.day} ${entry.hour}:${entry.minute}`}\n                </Text>\n              ))}\n            </ScrollView>\n          }\n        </View>\n      </View>\n    </ImageBackground>\n  );\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    resizeMode: 'cover',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  content: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  logo: {\n    width: 100, // Adjust as needed\n    height: 100, // Adjust as needed\n    marginBottom: 20,\n  },\n  text: {\n    color: 'white',\n    fontSize: 24,\n  },\n  inputContainer: {\n    padding: 10,\n  },\n  inputRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  inputField: {\n    width: 50,\n    margin: 5,\n    padding: 5,\n    borderColor: 'gray',\n    borderWidth: 1,\n    borderRadius: 5,\n    color: 'white', // Ensure input text is white\n  },\n  history: {\n    flex: 1,\n    padding: 5,\n  },\n  historyContainer: {\n    padding: 4,\n    margin: 5,\n    borderColor: 'gray',\n    borderWidth: 2,\n    height: 30,\n    borderRadius: 10\n  },\n});\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,KAAA;AAEnD,SAASC,MAAM,QAAQ,OAAO;AAC9B,OAAOC,YAAY,MAAM,2CAA2C;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErE,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAA8BnB,QAAQ,CAAC,KAAK,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC1B,IAAAI,UAAA,GAA4BxB,QAAQ,CAAC,KAAK,CAAC;IAAAyB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAApCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EACxB,IAAAG,UAAA,GAAwB5B,QAAQ,CAAC;MAAE6B,WAAW,EAAE,CAAC;MAAEC,WAAW,EAAE,CAAC;MAAEC,YAAY,EAAE,CAAC;MAAEC,YAAY,EAAE;IAAE,CAAC,CAAC;IAAAC,UAAA,GAAAZ,cAAA,CAAAO,UAAA;IAA/FM,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EACpB,IAAAG,UAAA,GAA0BpC,QAAQ,CAAC,OAAO,CAAC;IAAAqC,UAAA,GAAAhB,cAAA,CAAAe,UAAA;IAApCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EACtB,IAAAG,UAAA,GAAkCxC,QAAQ,CAAC,KAAK,CAAC;IAAAyC,WAAA,GAAApB,cAAA,CAAAmB,UAAA;IAA1CE,SAAS,GAAAD,WAAA;IAAEE,YAAY,GAAAF,WAAA;EAC9B,IAAMG,GAAG,GAAGhC,MAAM,CAAC,IAAI,CAAC;EAExB,IAAMiC,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;IAC5B,OAAQX,IAAI,CAACL,WAAW,GAAG,EAAE,GAAGK,IAAI,CAACJ,WAAW,IAAKI,IAAI,CAACH,YAAY,GAAG,EAAE,GAAGG,IAAI,CAACF,YAAY,CAAC;EAClG,CAAC;EAED,IAAAc,WAAA,GAA0B9C,QAAQ,CAAC6C,eAAe,CAAC,CAAC,CAAC;IAAAE,WAAA,GAAA1B,cAAA,CAAAyB,WAAA;IAA9CE,KAAK,GAAAD,WAAA;IAAEE,QAAQ,GAAAF,WAAA;EACtB,IAAAG,WAAA,GAA8BlD,QAAQ,CAAC,EAAE,CAAC;IAAAmD,WAAA,GAAA9B,cAAA,CAAA6B,WAAA;IAAnCE,OAAO,GAAAD,WAAA;IAAEE,UAAU,GAAAF,WAAA;EAC1B,IAAAG,WAAA,GAA4CtD,QAAQ,CAAC,KAAK,CAAC;IAAAuD,WAAA,GAAAlC,cAAA,CAAAiC,WAAA;IAApDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EAExC,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvB,IAAId,GAAG,CAACe,OAAO,EAAE;MACfC,aAAa,CAAChB,GAAG,CAACe,OAAO,CAAC;MAC1Bf,GAAG,CAACe,OAAO,GAAG,IAAI;IACpB;EACF,CAAC;EAED,IAAME,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;IAClBH,UAAU,CAAC,CAAC;IACZnB,QAAQ,CAAC,OAAO,CAAC;IACjBhB,UAAU,CAAC,KAAK,CAAC;IACjBI,SAAS,CAAC,KAAK,CAAC;IAChBgB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,IAAMmB,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBJ,UAAU,CAAC,CAAC;IACZd,GAAG,CAACe,OAAO,GAAGI,WAAW,CAAC,YAAM;MAC9Bd,QAAQ,CAAC,UAAAe,IAAI,EAAI;QACf,IAAMC,iBAAiB,GAAG/B,IAAI,CAACH,YAAY,GAAG,EAAE,GAAGG,IAAI,CAACF,YAAY;QACpE,IAAIgC,IAAI,GAAGC,iBAAiB,IAAI,CAACvB,SAAS,EAAE;UAC1CH,QAAQ,CAAC,OAAO,CAAC;QACnB;QACA,IAAIyB,IAAI,KAAKC,iBAAiB,IAAI,CAACvB,SAAS,EAAE;UAC5CH,QAAQ,CAAC,QAAQ,CAAC;UAClBI,YAAY,CAAC,IAAI,CAAC;QACpB;QACA,IAAIqB,IAAI,GAAG,CAAC,EAAE;UACZ,OAAOA,IAAI,GAAG,CAAC;QACjB;QACAE,WAAW,CAAC,CAAC;QACbL,KAAK,CAAC,CAAC;QACPM,WAAW,CAAC,CAAC;QACb,OAAOtB,eAAe,CAAC,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,IAAMuB,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;IAClB7C,UAAU,CAAC,IAAI,CAAC;IAChBgB,QAAQ,CAAC,OAAO,CAAC;IACjBuB,UAAU,CAAC,CAAC;EACd,CAAC;EAED,IAAMO,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;IACjBR,KAAK,CAAC,CAAC;IACPZ,QAAQ,CAACJ,eAAe,CAAC,CAAC,CAAC;IAC3BqB,WAAW,CAAC,CAAC;EACf,CAAC;EAED,IAAMI,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;IAClBZ,UAAU,CAAC,CAAC;IACZ/B,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,IAAM6C,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;IACnBT,UAAU,CAAC,CAAC;IACZnC,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,IAAM8C,UAAU,GAAG,SAAbA,UAAUA,CAAIC,KAAK,EAAEC,IAAI,EAAK;IAClC,IAAMC,QAAQ,GAAGC,QAAQ,CAACF,IAAI,CAAC,IAAI,CAAC;IACpCvC,OAAO,CAAA0C,aAAA,CAAAA,aAAA,KAAM3C,IAAI,OAAA4C,eAAA,KAAGL,KAAK,EAAGE,QAAQ,EAAE,CAAC;EACzC,CAAC;EAED,IAAMT,WAAW;IAAA,IAAAa,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAC9B,IAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC9B,IAAMC,IAAI,GAAGF,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACjD,IAAMC,KAAK,GAAG,CAACL,WAAW,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEF,QAAQ,CAAC,CAAC;MACrD,IAAMG,GAAG,GAAGP,WAAW,CAACQ,OAAO,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC;MAC5C,IAAMK,IAAI,GAAGT,WAAW,CAACU,QAAQ,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC/D,IAAMC,MAAM,GAAGZ,WAAW,CAACa,UAAU,CAAC,CAAC,CAACT,QAAQ,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAEnEG,OAAO,CAACC,GAAG,CAACb,IAAI,EAAEG,KAAK,EAAEE,GAAG,EAAEE,IAAI,EAAEG,MAAM,CAAC;MAE3C,IAAMI,QAAQ,GAAG;QAAEd,IAAI,EAAJA,IAAI;QAAEG,KAAK,EAALA,KAAK;QAAEE,GAAG,EAAHA,GAAG;QAAEE,IAAI,EAAJA,IAAI;QAAEG,MAAM,EAANA;MAAO,CAAC;MACnD,IAAMK,cAAc,MAAAC,MAAA,CAAAC,kBAAA,CAAOhD,OAAO,IAAE6C,QAAQ,EAAC;MAC7C5C,UAAU,CAAC6C,cAAc,CAAC;MAE1B,IAAI;QACF,MAAMrF,YAAY,CAACwF,OAAO,CAAC,mBAAmB,EAAEC,IAAI,CAACC,SAAS,CAACL,cAAc,CAAC,CAAC;MACjF,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IAAA,gBAnBKtC,WAAWA,CAAA;MAAA,OAAAa,IAAA,CAAA0B,KAAA,OAAAC,SAAA;IAAA;EAAA,GAmBhB;EAED,IAAMvC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxB,IAAMwC,YAAY,GAAGzE,IAAI,CAACL,WAAW,GAAG+E,IAAI,CAACC,KAAK,CAAC3E,IAAI,CAACJ,WAAW,GAAG,EAAE,CAAC;IACzE,IAAMgF,YAAY,GAAG5E,IAAI,CAACJ,WAAW,GAAG,EAAE;IAC1CpB,KAAK,CAACqG,KAAK,CACT,oBAAoB,EACnB,wBAAuBJ,YAAa,YAAWG,YAAa,UAAS,EACtE,CAAC;MAAEpC,IAAI,EAAE;IAAK,CAAC,CACjB,CAAC;EACH,CAAC;EAEDzE,SAAS,CAAC,YAAM;IACdgD,QAAQ,CAACJ,eAAe,CAAC,CAAC,CAAC;IAG3B,IAAMmE,WAAW;MAAA,IAAAC,KAAA,GAAAjC,iBAAA,CAAG,aAAY;QAC9B,IAAI;UACF,IAAMkC,YAAY,SAASrG,YAAY,CAACsG,OAAO,CAAC,mBAAmB,CAAC;UACpE,IAAID,YAAY,KAAK,IAAI,EAAE;YACzB7D,UAAU,CAACiD,IAAI,CAACc,KAAK,CAACF,YAAY,CAAC,CAAC;UACtC;QACF,CAAC,CAAC,OAAOV,KAAK,EAAE;UACdT,OAAO,CAACS,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;QAClE;MACF,CAAC;MAAA,gBATKQ,WAAWA,CAAA;QAAA,OAAAC,KAAA,CAAAR,KAAA,OAAAC,SAAA;MAAA;IAAA,GAShB;IAEDM,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAAC9E,IAAI,CAAC,CAAC;EAEV,IAAMmF,UAAU,GAAG,SAAbA,UAAUA,CAAIC,OAAO,EAAK;IAC9B,IAAMC,OAAO,GAAGX,IAAI,CAACC,KAAK,CAACS,OAAO,GAAG,EAAE,CAAC;IACxC,IAAME,gBAAgB,GAAGF,OAAO,GAAG,EAAE;IACrC,OAAQ,GAAEC,OAAQ,IAAGC,gBAAgB,CAACnC,QAAQ,CAAC,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;EACrE,CAAC;EAED,OACE7E,IAAA,CAACV,eAAe;IACdoH,MAAM,EAAE/E,SAAS,GAAGgF,OAAO,mBAAmB,CAAC,GAAGA,OAAO,uBAAuB,CAAE;IAClFC,KAAK,EAAEC,MAAM,CAACC,UAAW;IAAAC,QAAA,EAEzB7G,KAAA,CAACb,IAAI;MAACuH,KAAK,EAAEC,MAAM,CAACG,OAAQ;MAAAD,QAAA,GAC1B/G,IAAA,CAACJ,KAAK;QAAC8G,MAAM,EAAEC,OAAO,sBAAsB,CAAE;QAACC,KAAK,EAAEC,MAAM,CAACI;MAAK,CAAE,CAAC,EACrEjH,IAAA,CAACR,IAAI;QAACoH,KAAK,EAAEC,MAAM,CAAClD,IAAK;QAAAoD,QAAA,EAAC;MAAc,CAAM,CAAC,EAC/C/G,IAAA,CAACR,IAAI;QAACoH,KAAK,EAAEC,MAAM,CAAClD,IAAK;QAAAoD,QAAA,EAAET,UAAU,CAACrE,KAAK;MAAC,CAAO,CAAC,EACpD/B,KAAA,CAACb,IAAI;QAACuH,KAAK,EAAEC,MAAM,CAACK,cAAe;QAAAH,QAAA,GACjC7G,KAAA,CAACb,IAAI;UAACuH,KAAK,EAAEC,MAAM,CAACM,QAAS;UAAAJ,QAAA,GAC3B/G,IAAA,CAACT,SAAS;YACR6H,WAAW,EAAC,oBAAoB;YAChCC,YAAY,EAAE,SAAAA,aAAC1D,IAAI;cAAA,OAAKF,UAAU,CAAC,aAAa,EAAEE,IAAI,CAAC;YAAA,CAAC;YACxD2D,YAAY,EAAC,SAAS;YACtBV,KAAK,EAAEC,MAAM,CAACU;UAAW,CAC1B,CAAC,EACFvH,IAAA,CAACR,IAAI;YAACoH,KAAK,EAAEC,MAAM,CAAClD,IAAK;YAAAoD,QAAA,EAAC;UAAC,CAAM,CAAC,EAClC/G,IAAA,CAACT,SAAS;YACR6H,WAAW,EAAC,oBAAoB;YAChCC,YAAY,EAAE,SAAAA,aAAC1D,IAAI;cAAA,OAAKF,UAAU,CAAC,aAAa,EAAEE,IAAI,CAAC;YAAA,CAAC;YACxD2D,YAAY,EAAC,SAAS;YACtBV,KAAK,EAAEC,MAAM,CAACU;UAAW,CAC1B,CAAC;QAAA,CACE,CAAC,EACPrH,KAAA,CAACb,IAAI;UAACuH,KAAK,EAAEC,MAAM,CAACM,QAAS;UAAAJ,QAAA,GAC3B/G,IAAA,CAACT,SAAS;YACR6H,WAAW,EAAC,cAAc;YAC1BC,YAAY,EAAE,SAAAA,aAAC1D,IAAI;cAAA,OAAKF,UAAU,CAAC,cAAc,EAAEE,IAAI,CAAC;YAAA,CAAC;YACzD2D,YAAY,EAAC,SAAS;YACtBV,KAAK,EAAEC,MAAM,CAACU;UAAW,CAC1B,CAAC,EACFvH,IAAA,CAACR,IAAI;YAACoH,KAAK,EAAEC,MAAM,CAAClD,IAAK;YAAAoD,QAAA,EAAC;UAAC,CAAM,CAAC,EAClC/G,IAAA,CAACT,SAAS;YACR6H,WAAW,EAAC,cAAc;YAC1BC,YAAY,EAAE,SAAAA,aAAC1D,IAAI;cAAA,OAAKF,UAAU,CAAC,cAAc,EAAEE,IAAI,CAAC;YAAA,CAAC;YACzD2D,YAAY,EAAC,SAAS;YACtBV,KAAK,EAAEC,MAAM,CAACU;UAAW,CAC1B,CAAC;QAAA,CACE,CAAC;MAAA,CACH,CAAC,EACNhH,OAAO,GAAGP,IAAA,CAACb,MAAM;QAACqI,KAAK,EAAC,MAAM;QAACC,OAAO,EAAEnE;MAAK,CAAE,CAAC,GAAGtD,IAAA,CAACb,MAAM;QAACqI,KAAK,EAAC,OAAO;QAACC,OAAO,EAAEpE;MAAM,CAAE,CAAC,EAC3F9C,OAAO,IAAI,CAACI,MAAM,GAAGX,IAAA,CAACb,MAAM;QAACqI,KAAK,EAAC,OAAO;QAACC,OAAO,EAAElE;MAAM,CAAE,CAAC,GAAG,IAAI,EACpEhD,OAAO,IAAII,MAAM,GAAGX,IAAA,CAACb,MAAM;QAACqI,KAAK,EAAC,QAAQ;QAACC,OAAO,EAAEjE;MAAO,CAAE,CAAC,GAAG,IAAI,EACtEtD,KAAA,CAACb,IAAI;QAACuH,KAAK,EAAEC,MAAM,CAACxE,OAAQ;QAAA0E,QAAA,GAC1B/G,IAAA,CAACN,gBAAgB;UAACgI,UAAU,EAAE,SAAAA,WAAA;YAAA,OAAMhF,iBAAiB,CAAC,CAACD,cAAc,CAAC;UAAA,CAAC;UAAAsE,QAAA,EACrE/G,IAAA,CAACR,IAAI;YAACoH,KAAK,EAAEC,MAAM,CAAClD,IAAK;YAAAoD,QAAA,EAAC;UAAkB,CAAM;QAAC,CACnC,CAAC,EAElBtE,cAAc,IACbzC,IAAA,CAACP,UAAU;UAACmH,KAAK,EAAEC,MAAM,CAACc,gBAAiB;UAAAZ,QAAA,EACxC1E,OAAO,CAACuF,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK;YAAA,OACxB9H,IAAA,CAACR,IAAI;cAAaoH,KAAK,EAAEC,MAAM,CAAClD,IAAK;cAAAoD,QAAA,EACjC,GAAEc,KAAK,CAACzD,IAAK,IAAGyD,KAAK,CAACtD,KAAM,IAAGsD,KAAK,CAACpD,GAAI,IAAGoD,KAAK,CAAClD,IAAK,IAAGkD,KAAK,CAAC/C,MAAO;YAAC,GADjEgD,KAEL,CAAC;UAAA,CACR;QAAC,CACQ,CAAC;MAAA,CAEX,CAAC;IAAA,CACH;EAAC,CACQ,CAAC;AAEtB;AAEA,IAAMjB,MAAM,GAAGzH,UAAU,CAAC2I,MAAM,CAAC;EAC/BjB,UAAU,EAAE;IACVkB,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE,OAAO;IACnBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDnB,OAAO,EAAE;IACPgB,IAAI,EAAE,CAAC;IACPI,KAAK,EAAE,MAAM;IACbF,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBE,OAAO,EAAE;EACX,CAAC;EACDpB,IAAI,EAAE;IACJmB,KAAK,EAAE,GAAG;IACVE,MAAM,EAAE,GAAG;IACXC,YAAY,EAAE;EAChB,CAAC;EACD5E,IAAI,EAAE;IACJpC,KAAK,EAAE,OAAO;IACdiH,QAAQ,EAAE;EACZ,CAAC;EACDtB,cAAc,EAAE;IACdmB,OAAO,EAAE;EACX,CAAC;EACDlB,QAAQ,EAAE;IACRsB,aAAa,EAAE,KAAK;IACpBN,UAAU,EAAE,QAAQ;IACpBI,YAAY,EAAE;EAChB,CAAC;EACDhB,UAAU,EAAE;IACVa,KAAK,EAAE,EAAE;IACTM,MAAM,EAAE,CAAC;IACTL,OAAO,EAAE,CAAC;IACVM,WAAW,EAAE,MAAM;IACnBC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IACftH,KAAK,EAAE;EACT,CAAC;EACDc,OAAO,EAAE;IACP2F,IAAI,EAAE,CAAC;IACPK,OAAO,EAAE;EACX,CAAC;EACDV,gBAAgB,EAAE;IAChBU,OAAO,EAAE,CAAC;IACVK,MAAM,EAAE,CAAC;IACTC,WAAW,EAAE,MAAM;IACnBC,WAAW,EAAE,CAAC;IACdN,MAAM,EAAE,EAAE;IACVO,YAAY,EAAE;EAChB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}