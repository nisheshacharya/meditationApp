{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport var mapNotificationResponse = function mapNotificationResponse(response) {\n  var mappedResponse = _objectSpread({}, response);\n  try {\n    var _mappedResponse$notif, _mappedResponse$notif2;\n    var dataString = mappedResponse == null ? void 0 : (_mappedResponse$notif = mappedResponse.notification) == null ? void 0 : (_mappedResponse$notif2 = _mappedResponse$notif.request) == null ? void 0 : _mappedResponse$notif2.content['dataString'];\n    if (typeof dataString === 'string') {\n      mappedResponse.notification.request.content.data = JSON.parse(dataString);\n      delete mappedResponse.notification.request.content.dataString;\n    }\n  } catch (e) {\n    console.log(`Error in response: ${e}`);\n  }\n  return mappedResponse;\n};","map":{"version":3,"names":["mapNotificationResponse","response","mappedResponse","_objectSpread","_mappedResponse$notif","_mappedResponse$notif2","dataString","notification","request","content","data","JSON","parse","e","console","log"],"sources":["D:\\practice\\projects\\meditationApp\\meditationApp\\homework-4-nisheshacharya\\homework4\\node_modules\\expo-notifications\\src\\utils\\mapNotificationResponse.ts"],"sourcesContent":["import { NotificationResponse } from '../Notifications.types';\n\n/**\n * @hidden\n *\n * Does any required processing of a notification response from native code\n * before it is passed to a notification response listener, or to the\n * last notification response hook.\n *\n * @param response The raw response passed in from native code\n * @returns the mapped response.\n */\nexport const mapNotificationResponse = (response: NotificationResponse) => {\n  const mappedResponse: NotificationResponse & {\n    notification: { request: { content: { dataString?: string } } };\n  } = { ...response };\n  try {\n    const dataString = mappedResponse?.notification?.request?.content['dataString'];\n    if (typeof dataString === 'string') {\n      mappedResponse.notification.request.content.data = JSON.parse(dataString);\n      delete mappedResponse.notification.request.content.dataString;\n    }\n  } catch (e: any) {\n    console.log(`Error in response: ${e}`);\n  }\n  return mappedResponse;\n};\n"],"mappings":";;;AAYA,OAAO,IAAMA,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIC,QAA8B,EAAI;EACxE,IAAMC,cAAc,GAAAC,aAAA,KAEXF,QAAQ,CAAE;EACnB,IAAI;IAAA,IAAAG,qBAAA,EAAAC,sBAAA;IACF,IAAMC,UAAU,GAAGJ,cAAc,qBAAAE,qBAAA,GAAdF,cAAc,CAAEK,YAAY,sBAAAF,sBAAA,GAA5BD,qBAAA,CAA8BI,OAAO,qBAArCH,sBAAA,CAAuCI,OAAO,CAAC,YAAY,CAAC;IAC/E,IAAI,OAAOH,UAAU,KAAK,QAAQ,EAAE;MAClCJ,cAAc,CAACK,YAAY,CAACC,OAAO,CAACC,OAAO,CAACC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;MACzE,OAAOJ,cAAc,CAACK,YAAY,CAACC,OAAO,CAACC,OAAO,CAACH,UAAU;;GAEhE,CAAC,OAAOO,CAAM,EAAE;IACfC,OAAO,CAACC,GAAG,CAAC,sBAAsBF,CAAC,EAAE,CAAC;;EAExC,OAAOX,cAAc;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}