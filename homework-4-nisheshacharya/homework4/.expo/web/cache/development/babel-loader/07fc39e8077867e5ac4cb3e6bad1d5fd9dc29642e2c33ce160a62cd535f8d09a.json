{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport * as Notifications from 'expo-notifications';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function RemainderScreen() {\n  var _useState = useState(new Date()),\n    _useState2 = _slicedToArray(_useState, 2),\n    reminderTime = _useState2[0],\n    setReminderTime = _useState2[1];\n  var _useState3 = useState('Monday'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedDay = _useState4[0],\n    setSelectedDay = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    notificationId = _useState6[0],\n    setNotificationId = _useState6[1];\n  useEffect(function () {\n    registerForPushNotificationsAsync();\n    return function () {\n      if (notificationId) {\n        Notifications.cancelScheduledNotificationAsync(notificationId);\n      }\n    };\n  }, [notificationId]);\n  function registerForPushNotificationsAsync() {\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  function _registerForPushNotificationsAsync() {\n    _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n      if (Platform.OS === 'android') {\n        yield Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        status = _yield$Notifications$.status;\n      if (status !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          newStatus = _yield$Notifications$2.status;\n        if (newStatus !== 'granted') {\n          alert('Failed to get push token for push notification!');\n          return;\n        }\n      }\n    });\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  function schedulePushNotification() {\n    return _schedulePushNotification.apply(this, arguments);\n  }\n  function _schedulePushNotification() {\n    _schedulePushNotification = _asyncToGenerator(function* () {\n      var trigger = new Date();\n      trigger.setHours(reminderTime.getHours());\n      trigger.setMinutes(reminderTime.getMinutes());\n      trigger.setSeconds(0);\n      var id = yield Notifications.scheduleNotificationAsync({\n        content: {\n          title: \"Time for Meditation! üßò‚Äç‚ôÇÔ∏è\",\n          body: `Start your daily meditation now! It's ${selectedDay}.`\n        },\n        trigger: {\n          seconds: Math.floor((trigger - new Date()) / 1000),\n          repeats: true\n        }\n      });\n      setNotificationId(id);\n    });\n    return _schedulePushNotification.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.label,\n      children: \"Select Reminder Time:\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"HH:MM\",\n      keyboardType: \"numeric\",\n      onChangeText: function onChangeText(text) {\n        var _text$split$map = text.split(':').map(Number),\n          _text$split$map2 = _slicedToArray(_text$split$map, 2),\n          hours = _text$split$map2[0],\n          minutes = _text$split$map2[1];\n        setReminderTime(new Date().setHours(hours, minutes));\n      }\n    }), _jsx(Text, {\n      style: styles.label,\n      children: \"Select Day:\"\n    }), _jsxs(Picker, {\n      selectedValue: selectedDay,\n      style: styles.picker,\n      onValueChange: function onValueChange(itemValue) {\n        return setSelectedDay(itemValue);\n      },\n      children: [_jsx(Picker.Item, {\n        label: \"Monday\",\n        value: \"Monday\"\n      }), _jsx(Picker.Item, {\n        label: \"Tuesday\",\n        value: \"Tuesday\"\n      }), _jsx(Picker.Item, {\n        label: \"Wednesday\",\n        value: \"Wednesday\"\n      }), _jsx(Picker.Item, {\n        label: \"Thursday\",\n        value: \"Thursday\"\n      }), _jsx(Picker.Item, {\n        label: \"Friday\",\n        value: \"Friday\"\n      }), _jsx(Picker.Item, {\n        label: \"Saturday\",\n        value: \"Saturday\"\n      }), _jsx(Picker.Item, {\n        label: \"Sunday\",\n        value: \"Sunday\"\n      })]\n    }), _jsx(Button, {\n      title: \"Set Reminder\",\n      onPress: schedulePushNotification\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 16\n  },\n  label: {\n    fontSize: 18,\n    marginBottom: 8\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    width: '80%',\n    marginBottom: 16,\n    paddingHorizontal: 8\n  },\n  picker: {\n    height: 50,\n    width: '80%',\n    marginBottom: 16\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","Button","View","TextInput","Text","StyleSheet","Platform","Picker","Notifications","jsx","_jsx","jsxs","_jsxs","RemainderScreen","_useState","Date","_useState2","_slicedToArray","reminderTime","setReminderTime","_useState3","_useState4","selectedDay","setSelectedDay","_useState5","_useState6","notificationId","setNotificationId","registerForPushNotificationsAsync","cancelScheduledNotificationAsync","_registerForPushNotificationsAsync","apply","arguments","_asyncToGenerator","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","_yield$Notifications$","getPermissionsAsync","status","_yield$Notifications$2","requestPermissionsAsync","newStatus","alert","schedulePushNotification","_schedulePushNotification","trigger","setHours","getHours","setMinutes","getMinutes","setSeconds","id","scheduleNotificationAsync","content","title","body","seconds","Math","floor","repeats","style","styles","container","children","label","input","placeholder","keyboardType","onChangeText","text","_text$split$map","split","map","Number","_text$split$map2","hours","minutes","selectedValue","picker","onValueChange","itemValue","Item","value","onPress","create","flex","justifyContent","alignItems","padding","fontSize","marginBottom","height","borderColor","borderWidth","width","paddingHorizontal"],"sources":["D:/practice/projects/meditationApp/meditationApp/homework-4-nisheshacharya/homework4/screens/ReminderScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, View, TextInput, Text, StyleSheet, Platform, Picker } from 'react-native';\r\nimport * as Notifications from 'expo-notifications';\r\n\r\nexport default function RemainderScreen() {\r\n  const [reminderTime, setReminderTime] = useState(new Date());\r\n  const [selectedDay, setSelectedDay] = useState('Monday');\r\n  const [notificationId, setNotificationId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    registerForPushNotificationsAsync();\r\n\r\n    return () => {\r\n      if (notificationId) {\r\n        Notifications.cancelScheduledNotificationAsync(notificationId);\r\n      }\r\n    };\r\n  }, [notificationId]);\r\n\r\n  async function registerForPushNotificationsAsync() {\r\n    if (Platform.OS === 'android') {\r\n      await Notifications.setNotificationChannelAsync('default', {\r\n        name: 'default',\r\n        importance: Notifications.AndroidImportance.MAX,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#FF231F7C',\r\n      });\r\n    }\r\n\r\n    const { status } = await Notifications.getPermissionsAsync();\r\n    if (status !== 'granted') {\r\n      const { status: newStatus } = await Notifications.requestPermissionsAsync();\r\n      if (newStatus !== 'granted') {\r\n        alert('Failed to get push token for push notification!');\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  async function schedulePushNotification() {\r\n    const trigger = new Date();\r\n    trigger.setHours(reminderTime.getHours());\r\n    trigger.setMinutes(reminderTime.getMinutes());\r\n    trigger.setSeconds(0);\r\n    \r\n    const id = await Notifications.scheduleNotificationAsync({\r\n      content: {\r\n        title: \"Time for Meditation! üßò‚Äç‚ôÇÔ∏è\",\r\n        body: `Start your daily meditation now! It's ${selectedDay}.`,\r\n      },\r\n      trigger: {\r\n        seconds: Math.floor((trigger - new Date()) / 1000),\r\n        repeats: true,\r\n      },\r\n    });\r\n    \r\n    setNotificationId(id);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.label}>Select Reminder Time:</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"HH:MM\"\r\n        keyboardType=\"numeric\"\r\n        onChangeText={(text) => {\r\n          const [hours, minutes] = text.split(':').map(Number);\r\n          setReminderTime(new Date().setHours(hours, minutes));\r\n        }}\r\n      />\r\n      \r\n      <Text style={styles.label}>Select Day:</Text>\r\n      <Picker\r\n        selectedValue={selectedDay}\r\n        style={styles.picker}\r\n        onValueChange={(itemValue) => setSelectedDay(itemValue)}\r\n      >\r\n        <Picker.Item label=\"Monday\" value=\"Monday\" />\r\n        <Picker.Item label=\"Tuesday\" value=\"Tuesday\" />\r\n        <Picker.Item label=\"Wednesday\" value=\"Wednesday\" />\r\n        <Picker.Item label=\"Thursday\" value=\"Thursday\" />\r\n        <Picker.Item label=\"Friday\" value=\"Friday\" />\r\n        <Picker.Item label=\"Saturday\" value=\"Saturday\" />\r\n        <Picker.Item label=\"Sunday\" value=\"Sunday\" />\r\n      </Picker>\r\n      \r\n      <Button title=\"Set Reminder\" onPress={schedulePushNotification} />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 16,\r\n  },\r\n  label: {\r\n    fontSize: 18,\r\n    marginBottom: 8,\r\n  },\r\n  input: {\r\n    height: 40,\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    width: '80%',\r\n    marginBottom: 16,\r\n    paddingHorizontal: 8,\r\n  },\r\n  picker: {\r\n    height: 50,\r\n    width: '80%',\r\n    marginBottom: 16,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}