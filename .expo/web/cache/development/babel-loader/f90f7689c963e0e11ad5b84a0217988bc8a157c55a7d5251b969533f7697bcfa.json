{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\practice\\\\projects\\\\meditationApp\\\\meditationApp\\\\homework-4-nisheshacharya\\\\homework4\\\\screens\\\\ReminderScreen.js\";\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport CheckBox from \"react-native-web/dist/exports/CheckBox\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-notifications';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ReminderScreen() {\n  var _this = this;\n  var _useState = useState(new Date()),\n    _useState2 = _slicedToArray(_useState, 2),\n    reminderTime = _useState2[0],\n    setReminderTime = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedDays = _useState4[0],\n    setSelectedDays = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showTimePicker = _useState6[0],\n    setShowTimePicker = _useState6[1];\n  function registerForPushNotificationsAsync() {\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  function _registerForPushNotificationsAsync() {\n    _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n      if (Platform.OS === 'android') {\n        yield Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n      var _yield$Permissions$ge = yield Permissions.getPermissionsAsync(Permissions.NOTIFICATIONS),\n        status = _yield$Permissions$ge.status;\n      if (status !== 'granted') {\n        var _yield$Permissions$re = yield Permissions.requestPermissionsAsync(Permissions.NOTIFICATIONS),\n          newStatus = _yield$Permissions$re.status;\n        if (newStatus !== 'granted') {\n          alert('Failed to get push token for push notification!');\n          return;\n        }\n      }\n      var token = (yield Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n      return token;\n    });\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n  function schedulePushNotification() {\n    return _schedulePushNotification.apply(this, arguments);\n  }\n  function _schedulePushNotification() {\n    _schedulePushNotification = _asyncToGenerator(function* () {\n      if (!reminderTime || !selectedDays.length) return;\n      for (var day of selectedDays) {\n        var reminderDate = new Date();\n        reminderDate.setHours(reminderTime.getHours());\n        reminderDate.setMinutes(reminderTime.getMinutes());\n        reminderDate.setSeconds(0);\n        var dayOffset = (day - reminderDate.getDay() + 7) % 7;\n        reminderDate.setDate(reminderDate.getDate() + dayOffset);\n        yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: \"Time for Meditation! üßò‚Äç‚ôÇÔ∏è\",\n            body: 'Start your daily meditation now!'\n          },\n          trigger: {\n            year: reminderDate.getFullYear(),\n            month: reminderDate.getMonth() + 1,\n            day: reminderDate.getDate(),\n            hour: reminderDate.getHours(),\n            minute: reminderDate.getMinutes(),\n            repeats: true\n          }\n        });\n      }\n    });\n    return _schedulePushNotification.apply(this, arguments);\n  }\n  var toggleDay = function toggleDay(day) {\n    setSelectedDays(function (prevState) {\n      return prevState.includes(day) ? prevState.filter(function (d) {\n        return d !== day;\n      }) : [].concat(_toConsumableArray(prevState), [day]);\n    });\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Text, {\n      children: \"Select Time for Reminder:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      title: \"Select Time\",\n      onPress: function onPress() {\n        return setShowTimePicker(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), showTimePicker && _jsxDEV(DateTimePicker, {\n      value: reminderTime,\n      mode: \"time\",\n      is24Hour: true,\n      onChange: function onChange(event, selectedDate) {\n        setShowTimePicker(false);\n        if (selectedDate) {\n          setReminderTime(selectedDate);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), _jsxDEV(Text, {\n      children: \"Select Days of the Week:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: styles.dayContainer,\n      children: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(function (day, index) {\n        return _jsxDEV(View, {\n          style: styles.dayRow,\n          children: [_jsxDEV(CheckBox, {\n            value: selectedDays.includes(index),\n            onValueChange: function onValueChange() {\n              return toggleDay(index);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, _this), _jsxDEV(Text, {\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, _this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      title: \"Schedule Reminder\",\n      onPress: schedulePushNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  dayContainer: {\n    marginTop: 20\n  },\n  dayRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 5\n  }\n});","map":{"version":3,"names":["React","useState","Button","Platform","View","Text","StyleSheet","CheckBox","DateTimePicker","Notifications","Permissions","jsxDEV","_jsxDEV","ReminderScreen","_this","_useState","Date","_useState2","_slicedToArray","reminderTime","setReminderTime","_useState3","_useState4","selectedDays","setSelectedDays","_useState5","_useState6","showTimePicker","setShowTimePicker","registerForPushNotificationsAsync","_registerForPushNotificationsAsync","apply","arguments","_asyncToGenerator","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","_yield$Permissions$ge","getPermissionsAsync","NOTIFICATIONS","status","_yield$Permissions$re","requestPermissionsAsync","newStatus","alert","token","getExpoPushTokenAsync","data","console","log","schedulePushNotification","_schedulePushNotification","length","day","reminderDate","setHours","getHours","setMinutes","getMinutes","setSeconds","dayOffset","getDay","setDate","getDate","scheduleNotificationAsync","content","title","body","trigger","year","getFullYear","month","getMonth","hour","minute","repeats","toggleDay","prevState","includes","filter","d","concat","_toConsumableArray","style","styles","container","children","fileName","_jsxFileName","lineNumber","columnNumber","onPress","value","mode","is24Hour","onChange","event","selectedDate","dayContainer","map","index","dayRow","onValueChange","create","flex","justifyContent","alignItems","padding","marginTop","flexDirection","marginVertical"],"sources":["D:/practice/projects/meditationApp/meditationApp/homework-4-nisheshacharya/homework4/screens/ReminderScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Platform, View, Text, StyleSheet, CheckBox } from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport * as Notifications from 'expo-notifications';\r\nimport * as Permissions from 'expo-notifications';  // Updated import for permissions\r\n\r\nexport default function ReminderScreen() {\r\n  const [reminderTime, setReminderTime] = useState(new Date());\r\n  const [selectedDays, setSelectedDays] = useState([]);\r\n  const [showTimePicker, setShowTimePicker] = useState(false);\r\n\r\n  async function registerForPushNotificationsAsync() {\r\n    if (Platform.OS === 'android') {\r\n      await Notifications.setNotificationChannelAsync('default', {\r\n        name: 'default',\r\n        importance: Notifications.AndroidImportance.MAX,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#FF231F7C',\r\n      });\r\n    }\r\n\r\n    const { status } = await Permissions.getPermissionsAsync(Permissions.NOTIFICATIONS);\r\n    if (status !== 'granted') {\r\n      const { status: newStatus } = await Permissions.requestPermissionsAsync(Permissions.NOTIFICATIONS);\r\n      if (newStatus !== 'granted') {\r\n        alert('Failed to get push token for push notification!');\r\n        return;\r\n      }\r\n    }\r\n    \r\n    const token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n    return token;\r\n  }\r\n\r\n  async function schedulePushNotification() {\r\n    if (!reminderTime || !selectedDays.length) return;\r\n\r\n    for (const day of selectedDays) {\r\n      const reminderDate = new Date();\r\n      reminderDate.setHours(reminderTime.getHours());\r\n      reminderDate.setMinutes(reminderTime.getMinutes());\r\n      reminderDate.setSeconds(0);\r\n\r\n      const dayOffset = (day - reminderDate.getDay() + 7) % 7;\r\n      reminderDate.setDate(reminderDate.getDate() + dayOffset);\r\n\r\n      await Notifications.scheduleNotificationAsync({\r\n        content: {\r\n          title: \"Time for Meditation! üßò‚Äç‚ôÇÔ∏è\",\r\n          body: 'Start your daily meditation now!',\r\n        },\r\n        trigger: {\r\n          year: reminderDate.getFullYear(),\r\n          month: reminderDate.getMonth() + 1,\r\n          day: reminderDate.getDate(),\r\n          hour: reminderDate.getHours(),\r\n          minute: reminderDate.getMinutes(),\r\n          repeats: true,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  const toggleDay = (day) => {\r\n    setSelectedDays(prevState =>\r\n      prevState.includes(day) ? prevState.filter(d => d !== day) : [...prevState, day]\r\n    );\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text>Select Time for Reminder:</Text>\r\n      <Button title=\"Select Time\" onPress={() => setShowTimePicker(true)} />\r\n      {showTimePicker && (\r\n        <DateTimePicker\r\n          value={reminderTime}\r\n          mode=\"time\"\r\n          is24Hour={true}\r\n          onChange={(event, selectedDate) => {\r\n            setShowTimePicker(false);\r\n            if (selectedDate) {\r\n              setReminderTime(selectedDate);\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n\r\n      <Text>Select Days of the Week:</Text>\r\n      <View style={styles.dayContainer}>\r\n        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => (\r\n          <View key={index} style={styles.dayRow}>\r\n            <CheckBox\r\n              value={selectedDays.includes(index)}\r\n              onValueChange={() => toggleDay(index)}\r\n            />\r\n            <Text>{day}</Text>\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      <Button\r\n        title=\"Schedule Reminder\"\r\n        onPress={schedulePushNotification}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  dayContainer: {\r\n    marginTop: 20,\r\n  },\r\n  dayRow: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginVertical: 5,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}